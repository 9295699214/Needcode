class Solution:
    def sortArray(self, nums: list[int]) -> list[int]:
        self.quickSort(nums, 0, len(nums) - 1)
        return nums

    def customFunction(self, nums: list[int], f: int, l: int, p: int):
        while f <= l:
            if nums[f] < p and nums[l] < p:
                f += 1
            elif nums[f] < p and nums[l] > p:
                f += 1
                l -= 1
            elif nums[f] > p and nums[l] < p:
                nums[f], nums[l] = nums[l], nums[f]
                f += 1
                l -= 1
            elif nums[f] > p and nums[l] > p:
                l -= 1
        nums[f], nums[-1] = nums[-1], nums[f]

    def quickSort(self, nums: list[int], f: int, l: int):
        if f < l:
            p = nums[l]  # Choose the last element as the pivot
            self.customFunction(nums, f, l - 1, p)
            self.quickSort(nums, f, f - 1)
            self.quickSort(nums, f + 1, l)

sol = Solution()
nums = [5,2,3,1]
nums1 = [5,1,1,2,0,0]
res = sol.sortArray(nums)
print(res)
res1 = sol.sortArray(nums1)
print(res1)